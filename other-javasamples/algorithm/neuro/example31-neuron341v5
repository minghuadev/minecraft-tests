

$ cat neuron341v5.py
#!/usr/bin/env python
#  neuron341.py

import random as rand
import copy
import time

# dimensions
dim_in = 3
dim_mid = 4
dim_valin = (1 << dim_in)

# variables configured
cfg_delta = 20.0 # invert weight tweeking rate
cfg_lossthresh = 0.005 # early stop loss-threshold
cfg_loopmax = 1000
cfg_fixed_seed = True
cfg_randseed_saved = 0

# layers
inputs = [0 for _ in range(dim_in)]
middles = [0 for _ in range(dim_mid)]
output = 0

# weights
weightsm = [ [0 for _ in range(dim_mid)] for _ in range(dim_in) ]
weightso = [0 for _ in range(dim_mid)]

# init weighs to 0.5
for i in range(dim_in):
    for j in range(dim_mid): weightsm[i][j] = 0.5
for j in range(dim_mid): weightso[j] = 0.5

# relu()
def relu(x):
    if x >= 0: return x
    else: return x * 0.0

# forward propagation
def calcmiddle():
    for j in range(dim_mid):
        s = 0
        for i in range(dim_in):
            v = inputs[i] * weightsm[i][j]
            s += v
        r = relu(s)
        middles[j] = r

def calcoutput():
    s = 0
    for j in range(dim_mid):
        v = middles[j] * weightso[j]
        s += v
    r = relu(s)
    global output
    output = r

# standard inputs
def fillinputs(i):
    for x in range(dim_in):
        if i & (1 << x): inputs[x] = 1
        else: inputs[x] = 0

# iterate through input space
def calcresults():
    #print "Initial inputs and outputs:"
    outputs = [0 for i in range(dim_valin)]
    for i in range(dim_valin):
        fillinputs(i)
        calcmiddle()
        calcoutput()
        #print "    input ", inputs, " output ", output
        outputs[i] = output
    return outputs

# init:
outputs = calcresults()
print "  Initial outputs ", outputs

# set target:
target = [0 for i in range(dim_valin)]
target[2] = 1
target[3] = 1

# loss()
def calcloss(v1, v2):
    s = 0
    for i in range(dim_valin):
        dif = v1[i] - v2[i]
        adif = abs(dif)
        s += adif
    return float(s)

# random number seeding
if cfg_fixed_seed:
    rand.seed(1234)
    cfg_randseed_saved = 1234
else:
    cfg_randseed_saved = int(time.time())
    rand.seed(cfg_randseed_saved)

# tweek weights
def tweekweights():
    delta = cfg_delta
    for i in range(dim_in):
        for j in range(dim_mid):
            d = rand.randint(0,999)
            r = float(d) / 1000.0 / delta
            m = r - 0.5/delta
            weightsm[i][j] = float(weightsm[i][j] + m)
    for j in range(dim_mid):
        d = rand.randint(0,999)
        r = float(d) / 1000.0 / delta
        m = r - 0.5/delta
        weightso[j] = float(weightso[j] + m)

# log training process
tweekedlog = []
def savescean(n, outps):
    tweekedlog.append([n, calcloss(outps, target),
                       copy.deepcopy(weightsm), copy.deepcopy(weightso), copy.deepcopy(outps)] )

# init log
savescean(-1, copy.deepcopy(outputs))
oldloss = calcloss(outputs, target)
print "Initial loss ", oldloss

# start training ...
ts1=time.time()
loopmax = cfg_loopmax
maxtrain = 0
for train in range(loopmax):
    oldwsm = copy.deepcopy(weightsm)
    oldwso = copy.deepcopy(weightso)
    tweekweights()
    newoutputs = calcresults()
    los = calcloss(newoutputs, target)
    if los < oldloss:
        oldloss = los
        savescean(train, newoutputs)
    else:
        weightsm = copy.deepcopy(oldwsm)
        weightso = copy.deepcopy(oldwso)
    maxtrain = train
    if los < cfg_lossthresh:
        break
ts2=time.time()

for x in range( len(tweekedlog) ):
    v = tweekedlog[x]
    print " x ", x, " n ", v[0], " loss ", v[1]

print "Loops %d of %d consumed time %.2f" % (maxtrain, loopmax, ts2-ts1)

weightsm = copy.deepcopy( tweekedlog[-1][2] )
weightso = copy.deepcopy( tweekedlog[-1][3] )
outputs = copy.deepcopy( tweekedlog[-1][4] )

print "  Final weightsm "
for i in range(dim_in):
    lmsg = "%22s" % " "
    for j in range(dim_mid): lmsg += " %8.3f " % weightsm[i][j]
    print lmsg
print "  Final weightso "
for i in range(1):
    lmsg = "%22s" % " "
    for j in range(dim_mid): lmsg += " %8.3f " % weightso[j]
    print lmsg
print "  Final outputs "
for i in range(1):
    lmsg = "%22s" % " "
    for j in range(dim_valin): lmsg += " %8.3f " % outputs[j]
    print lmsg

print "  cfg_ delta lossthresh loopmax fixed_seed randseed_saved  %.2f %.5f %d %s %d" % (
        cfg_delta, cfg_lossthresh, cfg_loopmax, str(cfg_fixed_seed), cfg_randseed_saved
    )
if maxtrain >= loopmax-1:
    print "  Failed "
else:
    print "  OK "

#
# x  198  n  739  loss  0.006690305
# x  199  n  758  loss  0.004686695
#Loops 758 of 1000 consumed time 0.33
#  Final weightsm
#                          0.361     0.004     0.154     0.194
#                          0.648     0.435     1.076    -0.067
#                          0.532     0.449    -0.687     0.846
#  Final weightso
#                         -0.118     0.350     0.856    -0.676
#  Final outputs
#                          0.000    -0.000     0.996     1.001    -0.000    -0.000    -0.000    -0.000
#  cfg_ delta lossthresh loopmax fixed_seed randseed_saved  20.00 0.00500 1000 True 1234
#  OK
#

