
search golang verify trust chain

https://stackoverflow.com/questions/44004435/detecting-root-x509-certificates-in-go
detecting root certificates in go

    block, additionalData := pem.Decode([]byte(str))
    cert, err := x509.ParseCertificate(block.Bytes)

    block, _ := pem.Decode([]byte("-----BEGIN CERTIFICATE-----\nMIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw\nTzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh\ncmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4\nWhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu\nZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY\nMTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc\nh77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+\n0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U\nA5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW\nT8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH\nB5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC\nB5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv\nKBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn\nOlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn\njh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw\nqHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI\nrU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV\nHRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq\nhkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL\nubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ\n3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK\nNFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5\nORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur\nTkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC\njNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc\noyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq\n4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA\nmRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d\nemyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc=\n-----END CERTIFICATE-----"))
cert, _ := x509.ParseCertificate(block.Bytes)

   if bytes.Compare(cert.RawIssuer, cert.RawSubject) == 0 && cert.IsCA {
    println("It's a CA")
   }


https://stackoverflow.com/questions/40051213/where-is-golang-picking-up-root-cas-from
where is golang picking pu root ca from

    https://golang.org/src/crypto/x509/root_linux.go

    package x509
    // Possible certificate files; stop after finding one.
    var certFiles = []string{
    	"/etc/ssl/certs/ca-certificates.crt",                // Debian/Ubuntu/Gentoo etc.
    	"/etc/pki/tls/certs/ca-bundle.crt",                  // Fedora/RHEL 6
    	"/etc/ssl/ca-bundle.pem",                            // OpenSUSE
    	"/etc/pki/tls/cacert.pem",                           // OpenELEC
    	"/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem", // CentOS/RHEL 7
    }


https://security.stackexchange.com/questions/94793/how-to-identify-which-root-ca-does-the-client-certificate-use
how to identify which root ca does the client certificate use

    the issuer field in the x509 certificate is used to specify 
    the subject of the of the next certificate up in the certificate path. 


https://stackoverflow.com/questions/45970008/how-to-check-validity-of-pem-certificate-issued-by-ca
how to check validity of pem certificate issued by ca

    https://golang.org/pkg/crypto/x509/#example_Certificate_Verify
    func verifyCert(rootPEM, certPEM string, name string) error {
        roots := x509.NewCertPool()
        ok    := roots.AppendCertsFromPEM([]byte(rootPEM)); if !ok { return fmt.Errorf("failed to parse root certificate") }

        block, _  := pem.Decode([]byte(certPEM)); if block == nil { return fmt.Errorf("failed to parse certificate PEM") }
        cert, err := x509.ParseCertificate(block.Bytes); if err != nil { return fmt.Errorf("failed to parse certificate: %v", err.Error()) }

        opts := x509.VerifyOptions{ DNSName: name, Roots:   roots, }

        if _, err := cert.Verify(opts); err != nil { return fmt.Errorf("failed to verify certificate: %v", err.Error()) }
        return nil
    }


https://forfuncsake.github.io/post/2017/08/trust-extra-ca-cert-in-go-app/
how to trust extra ca certs in your go app

    const ( localCertFile = "/usr/local/internal-ca/ca.crt")

    func main() {
	insecure := flag.Bool("insecure-ssl", false, "Accept/Ignore all server SSL certificates")
	flag.Parse()

	// Get the SystemCertPool, continue with an empty pool on error
	rootCAs, _ := x509.SystemCertPool()
	if rootCAs == nil { rootCAs = x509.NewCertPool() }

	// Read in the cert file
	certs, err := ioutil.ReadFile(localCertFile)
	if err != nil { log.Fatalf("Failed to append %q to RootCAs: %v", localCertFile, err) }

	// Append our cert to the system pool
	if ok := rootCAs.AppendCertsFromPEM(certs); !ok { log.Println("No certs appended, using system certs only") }

	// Trust the augmented cert pool in our client
	config := &tls.Config{
		InsecureSkipVerify: *insecure,
		RootCAs:            rootCAs,
	}
	tr := &http.Transport{TLSClientConfig: config}
	client := &http.Client{Transport: tr}

	// Uses local self-signed cert
	req := http.NewRequest(http.MethodGet, "https://localhost/api/version", nil)
	resp, err := client.Do(req)
	// Handle resp and err

	// Still works with host-trusted CAs!
	req = http.NewRequest(http.MethodGet, "https://example.com/", nil)
	resp, err = client.Do(req)
	// Handle resp and err

	// ...
    }



search golang verify software trust chain


https://www.slashroot.in/how-does-ssltls-chain-certificates-and-its-validation-work
how does ssl/tls chain certificates and its validation work

  sampled/doc-ssl-cert-chain







