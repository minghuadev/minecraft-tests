
  keep updating age

diff --git a/uiscanner/src/main/java/no/nordicsemi/android/common/ui/scanner/ScannerScreen.kt b/uiscanner/src/main/java/no/nordicsemi/android/common/ui/scanner/ScannerScreen.kt
index 01f34ca..f14f450 100644
--- a/uiscanner/src/main/java/no/nordicsemi/android/common/ui/scanner/ScannerScreen.kt
+++ b/uiscanner/src/main/java/no/nordicsemi/android/common/ui/scanner/ScannerScreen.kt
@@ -32,12 +32,12 @@ package no.nordicsemi.android.common.ui.scanner
 
 import android.os.ParcelUuid
 import androidx.compose.foundation.layout.Column
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.getValue
-import androidx.compose.runtime.mutableStateOf
+import androidx.compose.foundation.layout.Row
+import androidx.compose.material3.Text
+import androidx.compose.runtime.*
 import androidx.compose.runtime.saveable.rememberSaveable
-import androidx.compose.runtime.setValue
 import androidx.compose.ui.res.stringResource
+import kotlinx.coroutines.delay
 import no.nordicsemi.android.common.theme.view.RssiIcon
 import no.nordicsemi.android.common.ui.scanner.main.DeviceListItem
 import no.nordicsemi.android.common.ui.scanner.model.DiscoveredBluetoothDevice
@@ -51,7 +51,53 @@ fun ScannerScreen(
     onResult: (ScannerScreenResult) -> Unit,
     deviceItem: @Composable (DiscoveredBluetoothDevice) -> Unit = {
         DeviceListItem(it.displayName, it.address,
-            extras = { RssiIcon(it.rssi) }
+            extras = {
+                Row() {
+                    val stInstance by remember { mutableStateOf( it ) }
+                    fun calculateAge(updateTime: Long): String {
+                        var displayAge: String = when {
+                            updateTime == 0L -> "61+m"
+                            updateTime < 0 -> "-1"
+                            else -> {
+                                val nowMs = System.currentTimeMillis()
+                                if ( updateTime > nowMs ) {
+                                    "-2"
+                                } else {
+                                    val tdiff = (nowMs - updateTime) / 1000
+                                    if ( tdiff <= 180 ) { // 3m
+                                        tdiff.toString() + "s"
+                                    } else if ( tdiff <= 3600 ) {
+                                        (tdiff/60).toString() + "m"
+                                    } else {
+                                        "60+m"
+                                    }
+                                }
+                            }
+                        }
+                        return displayAge
+                    }
+
+                    var timeout_init: Long = 150 // seconds
+                    var timeout by remember { mutableStateOf(timeout_init)}
+                    var stDisplayAge by remember { mutableStateOf("unknown")}
+
+                    LaunchedEffect(timeout) {
+                        val step_delay: Long = 3 // seconds
+                        delay(step_delay * 1000)
+                        if ( timeout > 0 ) {
+                            timeout -= step_delay
+                        } else {
+                            timeout = timeout_init
+                        }
+                        val age = calculateAge(stInstance.updateTime)
+                        stDisplayAge = age
+                    }
+
+                    Text(text = timeout.toString() + " ")
+                    Text(text = stDisplayAge + " ")
+                    RssiIcon(stInstance.rssi)
+                }
+            }
         )
     }
 ) {
diff --git a/uiscanner/src/main/java/no/nordicsemi/android/common/ui/scanner/model/DiscoveredBluetoothDevice.kt b/uiscanner/src/main/java/no/nordicsemi/android/common/ui/scanner/model/DiscoveredBluetoothDevice.kt
index e1664ec..512347c 100644
--- a/uiscanner/src/main/java/no/nordicsemi/android/common/ui/scanner/model/DiscoveredBluetoothDevice.kt
+++ b/uiscanner/src/main/java/no/nordicsemi/android/common/ui/scanner/model/DiscoveredBluetoothDevice.kt
@@ -48,6 +48,7 @@ data class DiscoveredBluetoothDevice(
     val rssi: Int = 0,
     val previousRssi: Int = 0,
     val highestRssi: Int = max(rssi, previousRssi),
+    val updateTime: Long = 0L,
 ) : Parcelable {
 
     fun hasRssiLevelChanged(): Boolean {
@@ -65,7 +66,8 @@ data class DiscoveredBluetoothDevice(
         hadName = hadName || name != null,
         previousRssi = rssi,
         rssi = scanResult.rssi,
-        highestRssi = if (highestRssi > rssi) highestRssi else rssi
+        highestRssi = if (highestRssi > rssi) highestRssi else rssi,
+        updateTime = System.currentTimeMillis()
     )
 
     fun matches(scanResult: ScanResult) = device.address == scanResult.device.address
@@ -108,5 +110,6 @@ fun ScanResult.toDiscoveredBluetoothDevice() = DiscoveredBluetoothDevice(
     scanResult = this,
     name = scanRecord?.deviceName,
     previousRssi = rssi,
-    rssi = rssi
+    rssi = rssi,
+    updateTime = System.currentTimeMillis()
 )
