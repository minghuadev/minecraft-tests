package com.example.myfirstapp

import android.Manifest
import android.content.Context
import android.content.Intent
import android.app.Service
import android.bluetooth.*
import android.bluetooth.le.ScanCallback
import android.bluetooth.le.ScanRecord
import android.bluetooth.le.ScanResult
import android.bluetooth.le.ScanSettings
import android.content.pm.PackageManager
import androidx.appcompat.app.AppCompatActivity
import android.os.IBinder
import android.os.ParcelUuid
import android.provider.Settings
import android.util.Log
import androidx.core.content.ContextCompat

/* search: android ble sample
   ref:    https://punchthrough.com/android-ble-guide/

   AndroidManifest.xml add:
        <uses-permission android:name="android.permission.BLUETOOTH" />
        <uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
        <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />

        <uses-feature
                android:name="android.hardware.bluetooth_le"
                android:required="true" />
 */

/* search: android service example
   ref:    https://www.vogella.com/tutorials/AndroidServices/article.html
           https://www.geeksforgeeks.org/services-in-android-with-example/

   mention service in manifest:
        <!-- Mention the service name here -->
        <service android:name=".NewService"/>
 */

class BleUtilOp : Service() {

    private val ENABLE_BLUETOOTH_REQUEST_CODE = 1

    private val ble_data = BleUtilData()

    private val target_uuid_service = ble_data.getUuid()
    /* Address: 12:34:56:78:90:ab, Name: cd-4567, RSSI: -64, Uuid: [00000001-0002-0003-0004-010203040506] */
    private var target_address = ""
    private val target_name = ble_data.getName()

    private var req_idx = 0
    private var ret_idx = 0
    private var ret_ok = false
    private var ret_scan_count = 0
    private var is_scanning_in = false
    private var scan_result: ScanResult? = null

    private var connect_trigger_request = false
    private var connect_gatt: BluetoothGatt? = null

    private val bluetoothAdapter: BluetoothAdapter by lazy {
        val bluetoothManager = getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager
        bluetoothManager.adapter
    }

    private val bleScanner by lazy {
        bluetoothAdapter.bluetoothLeScanner
    }

    private val scanSettings = ScanSettings.Builder()
        .setScanMode(ScanSettings.SCAN_MODE_BALANCED)
        .build()

    private val scanCallback: ScanCallback = object : ScanCallback() {
        override fun onScanResult(callbackType: Int, result: ScanResult) {
            //Log.w("ScanCallback: ", "$callbackType $result")
            /* 1
               ScanResult{device=12:34:56:78:90:ab,
                        scanRecord=ScanRecord [mAdvertiseFlags=6,
                                    mServiceUuids=[00000001-0002-0003-0004-010203040506],
                                    mServiceSolicitationUuids=[], mManufacturerSpecificData={},
                                    mServiceData={},
                                    mTxPowerLevel=-2147483648, mDeviceName=ab-1234],
                                    rssi=-65, timestampNanos=988230279152291, eventType=27,
                                    primaryPhy=1, secondaryPhy=0, advertisingSid=255,
                                    txPower=127, periodicAdvertisingInterval=0}
            */
            with(result) {
                //Log.i("ScanCallback",
                //      "Found BLE device! Address: ${device}, Name: ${scanRecord?:"Unnamed"}")
                var rec: ScanRecord? = this.scanRecord
                var nam: String? = "<no-name>"
                var suuid: List<ParcelUuid>? = null
                if ( rec != null ) {
                    nam = rec.getDeviceName()
                    suuid = rec.getServiceUuids()
                }
                var vrssi = this.rssi

                while ( suuid != null &&
                        suuid.toString() == target_uuid_service )
                { /* scope */
                    val dev_addr = device.toString()
                    val cond1 = dev_addr == target_address
                    val cond2 = nam == target_name
                    val cond3 = target_address.length > 0

                    if ( !cond3 ) {
                        target_address = dev_addr
                        ret_scan_count++
                        if (ret_scan_count <= 0) {
                            ret_scan_count = 1
                        }
                    } else if ( cond2 ) {
                        if ( cond1 ) {
                            ret_scan_count++
                            if (ret_scan_count <= 0) {
                                ret_scan_count = 1
                            }
                            scan_result = this
                        } else {
                            ret_scan_count = 0
                            target_address = ""
                            Log.w("ScanCallback", " reset target address")
                        }
                    }
                    Log.i("ScanCallback",
                        "Found BLE device! Address: ${device}, " +
                                "Name: ${nam?:"<null>"}, " +
                                "RSSI: ${vrssi}, " +
                                "Uuid: ${suuid?:"<null>"}, Count: ${ret_scan_count}" +
                                ", conds ${cond1} ${cond2}")
                    break /* scope */
                }
            }
        }
    }

    val isLocationPermissionGranted
        get() = hasPermission(Manifest.permission.ACCESS_FINE_LOCATION)

    fun Context.hasPermission(permissionType: String): Boolean {
        return ContextCompat.checkSelfPermission(this, permissionType) ==
                PackageManager.PERMISSION_GRANTED
    }


    private val gattCallback = object : BluetoothGattCallback() {
        override fun onConnectionStateChange(gatt: BluetoothGatt, status: Int, newState: Int) {
            val deviceAddress = gatt.device.address

            if (status == BluetoothGatt.GATT_SUCCESS) {
                if (newState == BluetoothProfile.STATE_CONNECTED) {
                    Log.w("BluetoothGattCallback", "Successfully connected to $deviceAddress")
                    // TODO: Store a reference to BluetoothGatt
                    connect_gatt = gatt
                } else if (newState == BluetoothProfile.STATE_DISCONNECTED) {
                    Log.w("BluetoothGattCallback", "Successfully disconnected from $deviceAddress")
                    gatt.close()
                    connect_gatt = null
                }
            } else {
                Log.w("BluetoothGattCallback", "Error $status encountered for $deviceAddress! Disconnecting...")
                gatt.close()
                connect_gatt = null
            }
        }
    }

    private fun promptEnableBluetooth(activity: AppCompatActivity) {
        if (!bluetoothAdapter.isEnabled) {
            val enableBtIntent = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)
            activity.startActivityForResult(enableBtIntent, ENABLE_BLUETOOTH_REQUEST_CODE)
        }
    }

    fun on_resume_check(activity: AppCompatActivity) {
        if (!bluetoothAdapter.isEnabled) {
            promptEnableBluetooth(activity)
        }
    }

    fun progress_ble_actions() {
        if ( req_idx == 0 && ret_idx == 0 ) {
            Log.w("Ble scan: ", "enabled?")
            ret_ok = false
            req_idx = 1
            if ( bluetoothAdapter.isEnabled ) {
                Log.w("Ble scan: ", "enabled!")
                ret_ok = true
            }
            ret_idx = 1
        } else
        if ( req_idx == 1 && ret_idx == 1 ) {
            Log.w("Ble scan: ", "location permission?")
            req_idx = 2
            if ( !ret_ok ) {
                Log.w("Ble scan: ", "enabled failed!")
                ret_idx = 999
            } else {
                ret_ok = false
                Log.w("Ble scan: ", "request location permission ...")
                if (isLocationPermissionGranted) {
                    ret_ok = true
                    ret_idx = 2
                    Log.w("Ble scan: ", "location permission ok!")
                }
            }
        } else
        if ( req_idx == 2 && ret_idx == 2 ) {
            Log.w("Ble scan: ", "scan?")
            req_idx = 3
            if ( !ret_ok ) {
                Log.w("Ble scan: ", "location permission failed!")
                ret_idx = 999
            } else {
                ret_ok = false
                Log.w("Ble scan: ", "start scanning ...")
                bleScanner.startScan(null, scanSettings, scanCallback)
                is_scanning_in = true
                ret_ok = true
                ret_idx = 3
            }
        } else
        if ( req_idx == 3 && ret_idx == 3 && ret_ok ) {
            Log.w("Ble scan: ", "scanning ...")
            req_idx = 4
            scan_result = null
            if ( ret_ok ) {
                ret_ok = false
                Log.w("Ble scan: ", "wait scanning ...")
            }
        } else
        if ( req_idx == 4 && ret_idx == 3 ) {
            if ( ret_scan_count > 6 && scan_result != null ) {
                bleScanner.stopScan(scanCallback)
                is_scanning_in = false
                ret_ok = true
                ret_idx = 4
                Log.w("Ble scan: ", "wait scanning finished")
            }
        } else
        if ( req_idx == 4 && ret_idx == 4 && ret_ok ) {
            Log.w("Ble scan: ", "trigger connecting ...")

            val scan_result_tmp = scan_result
            if ( scan_result_tmp != null ) {
                req_idx = 5
                ret_ok = false
                with(scan_result_tmp.device) {
                    /* search: android connectGatt context
                       ref: https://stackoverflow.com/questions/56642912/why-android-bluetoothdevice-conenctgatt-require-context-if-it-not-use-it
                     */
                    connectGatt(null, false, gattCallback)
                }
                connect_trigger_request = true
                Log.w("Ble scan: ", "trigger connecting triggering ...")
            }
        } else
        if ( req_idx == 5 && ret_idx == 4 ) {
            Log.w("Ble scan: ", "wait connecting ...")
            if ( connect_gatt != null ) {
                ret_idx = 5
                ret_ok = true
                Log.w("Ble scan: ", "wait connecting finished")
            }
        } else
        if ( req_idx == 5 && ret_idx == 5 && ret_ok ) {
            Log.w("Ble data: ", "wait data ...")
        } else
        if ( req_idx != 999 && ret_idx == 999 ) {
            Log.e("Ble state: ", "previous failure req_idx ${req_idx} failed!")
            req_idx = 999
        } else
        if ( req_idx == 999 && ret_idx == 999 ) {
            //
        } else {
            Log.e("Ble state: ",
                  "previous failure req_idx ${req_idx} ret_idx ${ret_idx} failed!")
            req_idx = 999
            ret_idx = 999
        }
    }

    // ref2:
    private var start_count = 0

    // execution of service will start
    // on calling this method
    override fun onStartCommand(intent: Intent, flags: Int, startId: Int): Int {

        start_count ++
        if ( start_count <= 0 ) { /* avoid wrapping and 0 */
            start_count = 1
        }

        // creating a media player which
        // will play the audio of Default
        // ringtone in android device
        ///player = MediaPlayer.create(this, Settings.System.DEFAULT_RINGTONE_URI)

        // providing the boolean
        // value as true to play
        // the audio on loop
        ///player.setLooping(true)

        // starting the process
        ///player.start()

        if ( start_count >= 3 ) {
            progress_ble_actions()
        }
        Log.w("User service: ", String.format("on-start() ${start_count}"))

        // returns the status
        // of the program
        return START_STICKY
    }

    // execution of the service will
    // stop on calling this method
    override fun onDestroy() {
        super.onDestroy()

        // stopping the process
        ///player.stop()
        if ( is_scanning_in ) {
            bleScanner.stopScan(scanCallback)
            is_scanning_in = false
        }

        val connect_gatt_tmp = connect_gatt
        if ( connect_gatt_tmp != null ) {
            connect_gatt_tmp.close()
            connect_gatt = null
            connect_trigger_request = false
        }

        Log.w("User service: ", "on-destroy()")
    }

    override fun onBind(intent: Intent): IBinder? {
        return null
    }
}