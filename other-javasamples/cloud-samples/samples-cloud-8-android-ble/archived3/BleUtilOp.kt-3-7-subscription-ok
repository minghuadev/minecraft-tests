package com.example.myfirstapp

import android.Manifest
import android.content.Context
import android.content.Intent
import android.app.Service
import android.bluetooth.*
import android.bluetooth.le.ScanCallback
import android.bluetooth.le.ScanRecord
import android.bluetooth.le.ScanResult
import android.bluetooth.le.ScanSettings
import android.content.pm.PackageManager
import androidx.appcompat.app.AppCompatActivity
import android.os.IBinder
import android.os.ParcelUuid
import android.provider.Settings
import android.util.Log
import androidx.core.content.ContextCompat
import java.util.*

/* search: android ble sample
   ref:    https://punchthrough.com/android-ble-guide/

   AndroidManifest.xml add:
        <uses-permission android:name="android.permission.BLUETOOTH" />
        <uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
        <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />

        <uses-feature
                android:name="android.hardware.bluetooth_le"
                android:required="true" />
 */

/* search: android service example
   ref:    https://www.vogella.com/tutorials/AndroidServices/article.html
           https://www.geeksforgeeks.org/services-in-android-with-example/

   mention service in manifest:
        <!-- Mention the service name here -->
        <service android:name=".NewService"/>
 */

class BleUtilOp : Service() {

    private val ENABLE_BLUETOOTH_REQUEST_CODE = 1
    private val GATT_MAX_MTU_SIZE = 517

    private val ble_data = BleUtilData()

    private val target_uuid_service = ble_data.getUuid()
    /* Address: 12:34:56:78:90:ab, Name: cd-4567, RSSI: -64, Uuid: [00000001-0002-0003-0004-010203040506] */
    private var target_address = ""
    private val target_name = ble_data.getName()

    private var req_idx = 0
    private var ret_idx = 0
    private var ret_ok = false
    private var ret_scan_count = 0
    private var is_scanning_in = false
    private var scan_result: ScanResult? = null

    private var connect_trigger_request = false
    private var connect_gatt: BluetoothGatt? = null /* set when connected */

    private var service_discovered = false
    private var service_mtu = 20 /* default 23, 23 - 3 user usable. 3 att header. */

    private var data_read_record:String? = null


    private val bluetoothAdapter: BluetoothAdapter by lazy {
        val bluetoothManager = getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager
        bluetoothManager.adapter
    }

    private val bleScanner by lazy {
        bluetoothAdapter.bluetoothLeScanner
    }

    private val scanSettings = ScanSettings.Builder()
        .setScanMode(ScanSettings.SCAN_MODE_BALANCED)
        .build()

    /* scan callback */
    private val scanCallback: ScanCallback = object : ScanCallback() {
        override fun onScanResult(callbackType: Int, result: ScanResult) {
            //Log.w("ScanCallback: ", "$callbackType $result")
            /* 1
               ScanResult{device=12:34:56:78:90:ab,
                        scanRecord=ScanRecord [mAdvertiseFlags=6,
                                    mServiceUuids=[00000001-0002-0003-0004-010203040506],
                                    mServiceSolicitationUuids=[], mManufacturerSpecificData={},
                                    mServiceData={},
                                    mTxPowerLevel=-2147483648, mDeviceName=ab-1234],
                                    rssi=-65, timestampNanos=988230279152291, eventType=27,
                                    primaryPhy=1, secondaryPhy=0, advertisingSid=255,
                                    txPower=127, periodicAdvertisingInterval=0}
            */
            with(result) {
                //Log.i("ScanCallback",
                //      "Found BLE device! Address: ${device}, Name: ${scanRecord?:"Unnamed"}")
                var rec: ScanRecord? = this.scanRecord
                var nam: String? = "<no-name>"
                var suuid: List<ParcelUuid>? = null
                if ( rec != null ) {
                    nam = rec.getDeviceName()
                    suuid = rec.getServiceUuids()
                }
                var vrssi = this.rssi

                while ( suuid != null &&
                        suuid.toString() == target_uuid_service )
                { /* scope */
                    val dev_addr = device.toString()
                    val cond1 = dev_addr == target_address
                    val cond2 = nam == target_name
                    val cond3 = target_address.length > 0

                    if ( !cond3 ) {
                        target_address = dev_addr
                        ret_scan_count++
                        if (ret_scan_count <= 0) {
                            ret_scan_count = 1
                        }
                    } else if ( cond2 ) {
                        if ( cond1 ) {
                            ret_scan_count++
                            if (ret_scan_count <= 0) {
                                ret_scan_count = 1
                            }
                            scan_result = this
                        } else {
                            ret_scan_count = 0
                            target_address = ""
                            Log.w("ScanCallback", " reset target address")
                        }
                    }
                    Log.i("ScanCallback",
                        "Found BLE device! Address: ${device}, " +
                                "Name: ${nam?:"<null>"}, " +
                                "RSSI: ${vrssi}, " +
                                "Uuid: ${suuid?:"<null>"}, Count: ${ret_scan_count}" +
                                ", conds ${cond1} ${cond2}")
                    break /* scope */
                }
            }
        }
    }

    val isLocationPermissionGranted
        get() = hasPermission(Manifest.permission.ACCESS_FINE_LOCATION)

    fun Context.hasPermission(permissionType: String): Boolean {
        return ContextCompat.checkSelfPermission(this, permissionType) ==
                PackageManager.PERMISSION_GRANTED
    }


    /* gatt callback */
    private val gattCallback = object : BluetoothGattCallback() {
        override fun onConnectionStateChange(gatt: BluetoothGatt, status: Int, newState: Int) {
            val deviceAddress = gatt.device.address

            if (status == BluetoothGatt.GATT_SUCCESS) {
                if (newState == BluetoothProfile.STATE_CONNECTED) {
                    Log.w("BluetoothGattCallback", "Successfully connected to $deviceAddress")
                    // TODO: Store a reference to BluetoothGatt
                    connect_gatt = gatt
                } else if (newState == BluetoothProfile.STATE_DISCONNECTED) {
                    Log.w("BluetoothGattCallback", "Successfully disconnected from $deviceAddress")
                    gatt.close()
                    connect_gatt = null
                }
            } else {
                Log.e(
                    "BluetoothGattCallback",
                    "Error $status encountered for $deviceAddress! Disconnecting..."
                )
                /* seen the infamous 133 error:
                D/BluetoothGatt: onClientConnectionState() - status=133 clientIf=11 device=12:34:56:78:90:ab
                W/BluetoothGattCallback: Error 133 encountered for 12:34:56:78:90:ab! Disconnecting...
                 */
                gatt.close()
                connect_gatt = null
            }
        }

        private fun BluetoothGatt.printGattTable() {
            if (services.isEmpty()) {
                Log.i(
                    "printGattTable",
                    "No service and characteristic available, call discoverServices() first?"
                )
                return
            }
            services.forEach { service ->
                val characteristicsTable = service.characteristics.joinToString(
                    separator = "\n|--",
                    prefix = "|--"
                ) { it.uuid.toString() }
                Log.i(
                    "printGattTable",
                    "\nService ${service.uuid}\nCharacteristics:\n$characteristicsTable"
                )
            }
        }

        override fun onServicesDiscovered(gatt: BluetoothGatt, status: Int) {
            with(gatt) {
                Log.w(
                    "BluetoothGattCallback",
                    "Discovered ${services.size} services for ${device.address}"
                )
                printGattTable() // See implementation just above this section
                // Consider connection setup as complete here
                service_discovered = true
            }
        }

        override fun onMtuChanged(gatt: BluetoothGatt, mtu: Int, status: Int) {
            if (status == BluetoothGatt.GATT_SUCCESS) {
                service_mtu = mtu
                Log.w(
                    "Ble MTU: ",
                    "ATT MTU changed to $mtu, success: " +
                            "${status == BluetoothGatt.GATT_SUCCESS}"
                )
            } else {
                Log.e(
                    "Ble MTU: ",
                    "ATT MTU failed to change to $mtu, success: " +
                            "${status == BluetoothGatt.GATT_SUCCESS}"
                )
            }
        }
        /* requesting 517 on ble 4.2 will get a reply for 247:
            D/BluetoothGatt: configureMTU() - device: 12:34:56:78:90:ab mtu: 517
            D/BluetoothGatt: onConfigureMTU() - Device=12:34:56:78:90:ab mtu=247 status=0
            W/Ble MTU:: ATT MTU changed to 247, success: true
           requesting 527 on ble 5 will get no reply. always assume the minimal 23.
         */

        /* char read */
        override fun onCharacteristicRead(gatt: BluetoothGatt,
                                          characteristic: BluetoothGattCharacteristic,
                                          status: Int )
        {
            with(characteristic) {
                when (status) {
                    BluetoothGatt.GATT_SUCCESS -> {
                        Log.i(
                            "BluetoothGattCallback",
                            "Read characteristic $uuid:\n${value.toHexString()}"
                        )
                    }
                    BluetoothGatt.GATT_READ_NOT_PERMITTED -> {
                        Log.e("BluetoothGattCallback", "Read not permitted for $uuid!")
                    }
                    else -> {
                        Log.e(
                            "BluetoothGattCallback",
                            "Characteristic read failed for $uuid, error: $status"
                        )
                    }
                }
            }
        }

        /* char write */
        override fun onCharacteristicWrite(gatt: BluetoothGatt,
                                           characteristic: BluetoothGattCharacteristic,
                                           status: Int)
        {
            with(characteristic) {
                when (status) {
                    BluetoothGatt.GATT_SUCCESS -> {
                        Log.i("BluetoothGattCallback", "Wrote to characteristic $uuid | value: ${value.toHexString()}")
                    }
                    BluetoothGatt.GATT_INVALID_ATTRIBUTE_LENGTH -> {
                        Log.e("BluetoothGattCallback", "Write exceeded connection ATT MTU!")
                    }
                    BluetoothGatt.GATT_WRITE_NOT_PERMITTED -> {
                        Log.e("BluetoothGattCallback", "Write not permitted for $uuid!")
                    }
                    else -> {
                        Log.e("BluetoothGattCallback", "Characteristic write failed for $uuid, error: $status")
                    }
                }
            }
        }

        override fun onCharacteristicChanged(gatt: BluetoothGatt,
                                             characteristic: BluetoothGattCharacteristic)
        {
            with(characteristic) {
                Log.i("BluetoothGattCallback",
                      "Characteristic $uuid changed | value: ${value.toHexString()}")
            }
        }
    }

    // ... somewhere outside BluetoothGattCallback
    fun ByteArray.toHexString(): String =
        joinToString(separator = " ", prefix = "0x") { String.format("%02X", it) }

    /* extentions to gatt characteristics */
    fun BluetoothGattCharacteristic.isReadable(): Boolean =
        containsProperty(BluetoothGattCharacteristic.PROPERTY_READ)

    fun BluetoothGattCharacteristic.isWritable(): Boolean =
        containsProperty(BluetoothGattCharacteristic.PROPERTY_WRITE)

    fun BluetoothGattCharacteristic.isWritableWithoutResponse(): Boolean =
        containsProperty(BluetoothGattCharacteristic.PROPERTY_WRITE_NO_RESPONSE)

    //fun BluetoothGattCharacteristic.containsProperty(property: Int): Boolean {
    //    return properties and property != 0
    //}

    fun BluetoothGattCharacteristic.isIndicatable(): Boolean =
        containsProperty(BluetoothGattCharacteristic.PROPERTY_INDICATE)

    fun BluetoothGattCharacteristic.isNotifiable(): Boolean =
        containsProperty(BluetoothGattCharacteristic.PROPERTY_NOTIFY)

    fun BluetoothGattCharacteristic.containsProperty(property: Int): Boolean =
        properties and property != 0

    /* data rw */
    private fun bleDataRead_user() {
        val userDataServiceUuid = UUID.fromString( ble_data.getCharSvc() )
        val userDataRdCharUuid = UUID.fromString( ble_data.getCharRd() )
        val conn_gatt = connect_gatt
        if ( conn_gatt == null ) {
            Log.e("Ble data: ", "gatt null")
            return
        }
        val uRdChar = conn_gatt
                .getService(userDataServiceUuid)?.getCharacteristic(userDataRdCharUuid)
        if (uRdChar?.isReadable() == true) {
            conn_gatt.readCharacteristic(uRdChar)
        } else {
            Log.e("Ble data: ", "gatt char null or non-readable")
            return
        }
    }

    fun writeCharacteristic(characteristic: BluetoothGattCharacteristic, payload: ByteArray) {
        val writeType = when {
            characteristic.isWritable() -> BluetoothGattCharacteristic.WRITE_TYPE_DEFAULT
            characteristic.isWritableWithoutResponse() -> {
                BluetoothGattCharacteristic.WRITE_TYPE_NO_RESPONSE
            }
            else -> error("Characteristic ${characteristic.uuid} cannot be written to")
        }

        connect_gatt?.let { gatt ->
            characteristic.writeType = writeType
            characteristic.value = payload
            gatt.writeCharacteristic(characteristic)
        } ?: error("Not connected to a BLE device!")
    }

    private fun bleDataWrite_user() {
        val userDataServiceUuid = UUID.fromString( ble_data.getCharSvc() )
        val userDataWrCharUuid = UUID.fromString( ble_data.getCharWr() )
        val conn_gatt = connect_gatt
        if ( conn_gatt == null ) {
            Log.e("Ble data: ", "gatt null")
            return
        }
        val uWrChar = conn_gatt
            .getService(userDataServiceUuid)?.getCharacteristic(userDataWrCharUuid)
        if (uWrChar?.isWritable() == true) {
            //var wr_data:ByteArray = byteArrayOf(0x21, 0x22, 0x23, 0x41, 0x42, 0x43)
            var wr_data:ByteArray = ble_data.getCharWrData()
            writeCharacteristic(uWrChar, wr_data)
        } else {
            Log.e("Ble data: ", "gatt char null or non-readable")
            return
        }
    }

    fun writeDescriptor(descriptor: BluetoothGattDescriptor, payload: ByteArray) {
        connect_gatt?.let { gatt ->
            descriptor.value = payload
            gatt.writeDescriptor(descriptor)
        } ?: error("Not connected to a BLE device!")
    }

    fun enableNotifications(characteristic: BluetoothGattCharacteristic) {
        val cccdUuid = UUID.fromString( ble_data.getCharRdCCC() /*CCC_DESCRIPTOR_UUID*/)
        val payload = when {
            characteristic.isIndicatable() -> BluetoothGattDescriptor.ENABLE_INDICATION_VALUE
            characteristic.isNotifiable() -> BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE
            else -> {
                Log.e("ConnectionManager", "${characteristic.uuid} doesn't support notifications/indications")
                return
            }
        }

        characteristic.getDescriptor(cccdUuid)?.let { cccDescriptor ->
            if (connect_gatt?.setCharacteristicNotification(characteristic, true) == false) {
                Log.e("ConnectionManager", "setCharacteristicNotification failed for ${characteristic.uuid}")
                return
            }
            writeDescriptor(cccDescriptor, payload)
        } ?: Log.e("ConnectionManager", "${characteristic.uuid} doesn't contain the CCC descriptor!")
    }

    fun enable_user_notif() {
        val userDataServiceUuid = UUID.fromString( ble_data.getCharSvc() )
        val userDataRdCharUuid = UUID.fromString( ble_data.getCharRd() )
        val conn_gatt = connect_gatt
        if ( conn_gatt == null ) {
            Log.e("Ble data: ", "gatt null")
            return
        }
        val uRdChar = conn_gatt
            .getService(userDataServiceUuid)?.getCharacteristic(userDataRdCharUuid)
        if ( uRdChar != null ) {
            enableNotifications(uRdChar)
        } else {
            Log.e("Ble data: ", "read char null")
        }
    }

    fun disableNotifications(characteristic: BluetoothGattCharacteristic) {
        if (!characteristic.isNotifiable() && !characteristic.isIndicatable()) {
            Log.e("ConnectionManager", "${characteristic.uuid} doesn't support indications/notifications")
            return
        }

        /* the CCC desc will be: "00002902-0000-1000-8000-00805f9b34fb" */
        val cccdUuid = UUID.fromString( ble_data.getCharRdCCC() /*CCC_DESCRIPTOR_UUID*/)
        characteristic.getDescriptor(cccdUuid)?.let { cccDescriptor ->
            if (connect_gatt?.setCharacteristicNotification(characteristic, false) == false) {
                Log.e("ConnectionManager", "setCharacteristicNotification failed for ${characteristic.uuid}")
                return
            }
            writeDescriptor(cccDescriptor, BluetoothGattDescriptor.DISABLE_NOTIFICATION_VALUE)
        } ?: Log.e("ConnectionManager", "${characteristic.uuid} doesn't contain the CCC descriptor!")
    }


    private fun promptEnableBluetooth(activity: AppCompatActivity) {
        if (!bluetoothAdapter.isEnabled) {
            val enableBtIntent = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)
            activity.startActivityForResult(enableBtIntent, ENABLE_BLUETOOTH_REQUEST_CODE)
        }
    }

    fun on_resume_check(activity: AppCompatActivity) {
        if (!bluetoothAdapter.isEnabled) {
            promptEnableBluetooth(activity)
        }
    }

    fun progress_ble_actions() {
        if ( req_idx == 0 && ret_idx == 0 ) {
            Log.w("Ble scan: ", "enabled?")
            ret_ok = false
            req_idx = 1
            if ( bluetoothAdapter.isEnabled ) {
                Log.w("Ble scan: ", "enabled!")
                ret_ok = true
            }
            ret_idx = 1
        } else
        if ( req_idx == 1 && ret_idx == 1 ) {
            Log.w("Ble scan: ", "location permission?")
            req_idx = 2
            if ( !ret_ok ) {
                Log.w("Ble scan: ", "enabled failed!")
                ret_idx = 999
            } else {
                ret_ok = false
                Log.w("Ble scan: ", "request location permission ...")
                if (isLocationPermissionGranted) {
                    ret_ok = true
                    ret_idx = 2
                    Log.w("Ble scan: ", "location permission ok!")
                }
            }
        } else
        if ( req_idx == 2 && ret_idx == 2 ) {
            Log.w("Ble scan: ", "scan?")
            req_idx = 3
            if ( !ret_ok ) {
                Log.w("Ble scan: ", "location permission failed!")
                ret_idx = 999
            } else {
                ret_ok = false
                Log.w("Ble scan: ", "start scanning ...")
                bleScanner.startScan(null, scanSettings, scanCallback)
                is_scanning_in = true
                ret_ok = true
                ret_idx = 3
            }
        } else
        if ( req_idx == 3 && ret_idx == 3 && ret_ok ) {
            Log.w("Ble scan: ", "scanning ...")
            req_idx = 4
            scan_result = null
            if ( ret_ok ) {
                ret_ok = false
                Log.w("Ble scan: ", "wait scanning ...")
            }
        } else
        if ( req_idx == 4 && ret_idx == 3 ) {
            if ( ret_scan_count > 6 && scan_result != null ) {
                bleScanner.stopScan(scanCallback)
                is_scanning_in = false
                ret_ok = true
                ret_idx = 4
                Log.w("Ble scan: ", "wait scanning finished")
            }
        } else
        if ( req_idx == 4 && ret_idx == 4 && ret_ok ) {
            Log.w("Ble scan: ", "trigger connecting ...")

            val scan_result_tmp = scan_result
            if ( scan_result_tmp != null ) {
                req_idx = 5
                ret_ok = false
                with(scan_result_tmp.device) {
                    /* search: android connectGatt context
                       ref: https://stackoverflow.com/questions/56642912/why-android-bluetoothdevice-conenctgatt-require-context-if-it-not-use-it
                     */
                    connectGatt(null, false, gattCallback)
                }
                connect_trigger_request = true
                Log.w("Ble scan: ", "trigger connecting triggering ...")
            }
        } else
        if ( req_idx == 5 && ret_idx == 4 ) {
            Log.w("Ble scan: ", "wait connecting ...")
            if ( connect_gatt != null ) {
                ret_idx = 5
                ret_ok = true
                Log.w("Ble scan: ", "wait connecting finished")
            }
        } else if ( req_idx == 5 && ret_idx == 5 && ret_ok ) {
            Log.w("Ble discovery: ", "trigger discovery ...")
            val conn_gatt_tmp = connect_gatt
            if ( conn_gatt_tmp != null ) {
                service_discovered = false
                conn_gatt_tmp.discoverServices()
                req_idx = 6
                ret_ok = false
            } else {
                ret_idx = 999
            }
        } else
        if ( req_idx == 6 && ret_idx == 5 ) {
            Log.w("Ble discovery: ", "wait discovery ...")
            if ( service_discovered ) {
                ret_ok = true
                ret_idx = 6
            }
        } else if ( req_idx == 6 && ret_idx == 6 && ret_ok ) {
            Log.w("Ble mtu: ", "trigger mtu ...")
            val conn_gatt_tmp = connect_gatt
            if ( conn_gatt_tmp != null ) {
                service_mtu = 0 /* invaid */
                conn_gatt_tmp.requestMtu(GATT_MAX_MTU_SIZE)
                req_idx = 7
                ret_ok = false
            } else {
                ret_idx = 999
            }
        } else if ( req_idx == 7 && ret_idx == 6 ) {
            Log.w("Ble mtu: ", "wait mtu ...")
            if ( service_mtu > 0 ) {
                ret_ok = true
                ret_idx = 7
            }
        } else if ( req_idx == 7 && ret_idx == 7 && ret_ok ) {
            Log.w("Ble subscription: ", "trigger subscription ...")
            val conn_gatt_tmp = connect_gatt
            if ( conn_gatt_tmp != null ) {
                enable_user_notif()
                req_idx = 8
                ret_ok = false
            } else {
                ret_idx = 999
            }
        } else if ( req_idx == 8 && ret_idx == 7 ) {
            Log.w("Ble data: ", "wait data read ...")
            if ( true ) { /* data_read_record != null */
                ret_ok = true
                ret_idx = 8
            }
        } else if ( req_idx == 8 && ret_idx == 8 && ret_ok ) {
            Log.w("Ble data: ", "trigger write ...")
            val conn_gatt_tmp = connect_gatt
            if ( conn_gatt_tmp != null ) {
                data_read_record = null /* invaid */
                //bleDataRead_user()
                bleDataWrite_user()
                req_idx = 9
                ret_ok = false
            } else {
                ret_idx = 999
            }
        } else if ( req_idx == 9 && ret_idx == 8 ) {
            Log.w("Ble data: ", "wait data read ...")
            if ( data_read_record != null ) {
                ret_ok = true
                ret_idx = 9
            }
        } else if ( req_idx == 9 && ret_idx == 9 && ret_ok ) {
            Log.w("Ble data: ", "wait data ...")
        } else
        if ( req_idx != 999 && ret_idx == 999 ) {
            Log.e("Ble state: ", "previous failure req_idx ${req_idx} failed!")
            req_idx = 999
        } else
        if ( req_idx == 999 && ret_idx == 999 ) {
            //
        } else {
            Log.e("Ble state: ",
                  "previous failure req_idx ${req_idx} ret_idx ${ret_idx} failed!")
            req_idx = 999
            ret_idx = 999
        }
    }

    // ref2:
    private var start_count = 0

    // execution of service will start
    // on calling this method
    override fun onStartCommand(intent: Intent, flags: Int, startId: Int): Int {

        start_count ++
        if ( start_count <= 0 ) { /* avoid wrapping and 0 */
            start_count = 1
        }

        // creating a media player which
        // will play the audio of Default
        // ringtone in android device
        ///player = MediaPlayer.create(this, Settings.System.DEFAULT_RINGTONE_URI)

        // providing the boolean
        // value as true to play
        // the audio on loop
        ///player.setLooping(true)

        // starting the process
        ///player.start()

        if ( start_count >= 3 ) {
            progress_ble_actions()
        }
        Log.w("User service: ", String.format("on-start() ${start_count}"))

        // returns the status
        // of the program
        return START_STICKY
    }

    // execution of the service will
    // stop on calling this method
    override fun onDestroy() {
        super.onDestroy()

        // stopping the process
        ///player.stop()
        if ( is_scanning_in ) {
            bleScanner.stopScan(scanCallback)
            is_scanning_in = false
        }

        val connect_gatt_tmp = connect_gatt
        if ( connect_gatt_tmp != null ) {
            connect_gatt_tmp.close()
            connect_gatt = null
            connect_trigger_request = false
        }

        Log.w("User service: ", "on-destroy()")
    }

    override fun onBind(intent: Intent): IBinder? {
        return null
    }
}