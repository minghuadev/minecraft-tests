

[1] parser c code with boost spirit
[2] boost wave
[3] boost wave tutorial
[3.1] the cpplexer
[3.1.1] boost 1.34 trailing space failure
[3.4] metaprogramming excerpt



[1] parse c code with boost spirit
http://stackoverflow.com/questions/6063888/can-boost-spirit-be-theoretically-practically-used-to-parse-c0x-or-any-othe
search: parser c code with boost spirit



[2] boost wave
http://stackoverflow.com/questions/14858017/using-boost-wave
search: boost wave



[3] boost wave tutorial
search: boost wave tutorial
http://www.boost.org/doc/libs/1_38_0/libs/wave/doc/introduction.html

two lexers: one based on re2c, the other on slex.
one idl lexer.
plan to port cpplexer 
           http://www.boost.org/doc/libs/1_38_0/libs/wave/doc/references.html#cpplexer
		[Juan Carlos Avevalo-Baeza: The Spirit cpplexer example]
		[Joel de Guzman et. al.: Spirit v1.8.2 documentation]


[3.1] the cpplexer
http://boost-spirit.com/repository/applications/show_contents.php
Important (Post Skips):

In boost 1.34, if there is a trailing white space characters in an input sequence, 
parse returns with info.full set to false, even though parsing was (essentially) full. 
The skip parser is ignored for the last sequence. In 1.33 parsing succeeds as expected. 
The change in behavior was intentional. See the news in Spirit's home page for details.

Some entries in the repository may not be updated for 1.34 post-skip behavior. 
If you find such a problem, please contact the author. If you are an author, 
please find some time to update your application. Thanks!

download: c

[3.1.1] boost 1.34 trailing space failure
search: boost 1.34 trailing space failure
https://svn.boost.org/trac/boost/ticket/1048
Spirit returns full = false in 1.34 if there is trailing spaces in input

Description: In boost 1.34, if there is a trailing white space characters in 
an input sequence, parse returns with info.full set to false, even though parsing 
was (essentially) full. The space_p skip parser is ignored for the last sequence. 
In 1.33 parsing succeeds as expected.

The change in behaviour was intentional. It was made on the grounds of consistency 
(parsers shouldn't consume any more output than what they have matched), as well as 
to avoid a hang when directly parsing stdin: namely, parse() would hang waiting for 
a non-whitespace character at the end of a match.

You may workaround this change by adding eps_p or end_p after your grammar, as in:

    my_grammar g;
    my_skipper skipper;
    parse(str, g >> eps_p, skipper); // 1
    parse(str, g >> end_p, skipper); // 2

The 2nd option requires a full match, while the first one gets you the previous 
behaviour without making a full match obligatory.

Here's where the change was first announced, for context:

     http://thread.gmane.org/gmane.comp.parsers.spirit.general/9839


[3.4] metaprogramming excerpt
http://www.boost.org/doc/libs/1_57_0/libs/preprocessor/doc/index.html
An excerpt from C++ Template Metaprogramming: Concepts, Tools, and Techniques from 
Boost and Beyond by Dave Abrahams and Aleksey Gurtovoy has been made available online. 
This excerpt contains a basic introduction to the Preprocessor library and preprocessor 
metaprogramming which may help users new to the library and users interested in seeing 
some of the facilities offered by the library. 


