
rest-crud-event


toc    rest vs crud
       rest vs event-driven
       event driven patterns


============================================================
 rest vs crud

http://www.infoq.com/news/2009/07/CRUDREST
Is CRUD Bad for REST

But the biggest reason why CRUD is not an appropriate paradigm for REST 
is an architectural one. In the heart of REST is the implementation of 
the protocol state machine using hypermedia. 

quotes Tim Ewald (http://www.pluralsight.com/community/blogs/tewald/archive/2007/04/26/46984.aspx)

    Here's what I came to understand. Every communication protocol has 
    a state machine. For some protocols they are very simple, for others 
    they are more complex. When you implement a protocol via RPC, you build 
    methods that modify the state of the communication. That state is maintained 
    as a black box at the endpoint. Because the protocol state is hidden, 
    it is easy to get things wrong. For instance, you might call Process before 
    calling Init. People have been looking for ways to avoid these problems 
    by annotating interface type information for a long time, but I'm not aware 
    of any mainstream solutions. The fact that the state of the protocol is encapsulated 
    behind method invocations that modify that state in non-obvious ways 
    also makes versioning interesting.

    The essence of REST is to make the states of the protocol explicit and 
    addressable by URIs. The current state of the protocol state machine 
    is represented by the URI you just operated on and the state representation 
    you retrieved. You change state by operating on the URI of the state you're 
    moving to, making that your new state. A state's representation includes 
    the links (arcs in the graph) to the other states that you can move to from 
    the current state. This is exactly how browser based apps work, and there 
    is no reason that your app's protocol can't work that way too. (The ATOM 
    Publishing protocol is the canonical example, though its easy to think that 
    its about entities, not a state machine.)

Following John Evdemon’s (http://msdn.microsoft.com/en-us/library/ms954638.aspx) article, 
explaining why CRUDy services is an SOA anti pattern, Arnon explains the disadvantages 
of CRUD REST:

        It circumvents the whole idea about "Services" - there's no business logic.
        It is exposing internal database structure or data rather than a thought-out contract.
        It encourages bypassing real services and going straight to their data.
        It creates a blob service (the data source).
        It encourages minuscule demi-serices (the multiple "interfaces" of said blob) 
             that disregard few of the fallacies of distributed computing.
        It is just client-server in sheep's clothing.

Arnon ends his post by reemphasizing that just adopting standards like HTTP, XML, JSON 
(although might be useful) does not constitute REST - adopting the REST architecture does.

This post is an important remainder that REST, similar to SOA, is not a set of standards 
and popular APIs, but rather an architectural paradigm, which needs to be understood 
and followed.  


============================================================
 rest vs event-driven

http://www.infoq.com/news/2009/05/Rest
REST – The Good, the Bad and the Ugly

The top three advantages of using REST are: 
    Relative ease of integration:
        ...a good RESTful API is discoverable from the initial URI onward. 
        This doesn’t suggest that a any application calling on your service will 
        auto magically know what to do. It does mean however that the developer 
        reading your API trying to integrate it has an easier life. Especially 
        if since hypermedia provides you the roadmap of what to do next 
    Use of ubiquitous standards - HTTP is the most common implementation of REST:
        Speaking HTTP which is the protocol of the web, emitting JSON or ATOMPub 
        means it is much easier to find a library that can connect to you on 
        any language and platform. 
    Scalability:
        ...stateless communication, replicated repository make for a good scalability potential. 

The two main REST drawbacks are:
    "Lo-rest" (using just GET and POST) implementations, which are specific to REST over HTTP:
        While technically it might still be RESTful, to me a uniform interface 
        with 2 verbs is too small to be really helpful (which indeed makes a lot 
        of the implementation unRESTful) 
    Limitations of today’s programming languages:
        ... programming languages are not resource oriented so the handling code 
        that maps URIs to tends to get messy. On the other hand it is relatively hard 
        to make the REST API hyper-text driven (Which is a constraint of REST) 

Arnon concludes his post by stating, that:
    REST seems simple but it isn’t - it requires a shift in thinking 
    (e.g. identifying resources, externalizing the state transitions etc.). 
    ... done right it can be an important and useful tool in your toolset. 
    [but] ... as with any architecture/technology - a bad implementation can negate 
    all the benefits 

... debates ...
For example, most REST implementations do not support asynchronous invocations and 
events. As a result, event-driven architectural style is probably a bad fit for REST. 
Another example, the separation of business and infrastructure concerns provided 
by the SOAP envelope is left to the implementer in the case of REST. Consequently, 
the implementation requires a significant number of potentially changing 
infrastructure concerns which might be not a good fit for REST.


============================================================
 event driven patterns

http://radar.oreilly.com/2015/02/variations-in-event-driven-architecture.html

mediator and broker


============================================================
 rest izuzak

http://ivanzuzak.info/2010/04/03/why-understanding-rest-is-hard-and-what-we-should-do-about-it-systematization-models-and-terminology-for-rest.html

state: session, transaction, application, resource, control, server, steady, transient.


============================================================
 rest hateoas 101

http://www.slideshare.net/apigee/hateoas-101-opinionated-introduction-to-a-rest-api-style

The constraints of REST
    1. Client-server
    2. Stateless server
    3. Cache
    4. Uniform interface
        a. Identification of resources 
        b. Manipulation of resources through representations
        c. Self-descriptive messages
        d. Hypermedia as the engine of application state
    5. Layered System
    6. Code-On-Demond (optional)



