diff --git a/Makefile b/Makefile
index 967ba26..8e9ce26 100644
--- a/Makefile
+++ b/Makefile
@@ -36,7 +36,7 @@ test : mosquitto
 
 install : mosquitto
 	set -e; for d in ${DIRS}; do $(MAKE) -C $${d} install; done
-	set -e; for d in ${DOCDIRS}; do $(MAKE) -C $${d} install; done
+	#set -e; for d in ${DOCDIRS}; do $(MAKE) -C $${d} install; done
 	$(INSTALL) -d ${DESTDIR}/etc/mosquitto
 	$(INSTALL) -m 644 mosquitto.conf ${DESTDIR}/etc/mosquitto/mosquitto.conf.example
 	$(INSTALL) -m 644 aclfile.example ${DESTDIR}/etc/mosquitto/aclfile.example
diff --git a/config.mk b/config.mk
index c0082fb..21a03c0 100644
--- a/config.mk
+++ b/config.mk
@@ -21,21 +21,21 @@
 # Disabling this will also mean that passwords must be stored in plain text. It
 # is strongly recommended that you only disable WITH_TLS if you are not using
 # password authentication at all.
-WITH_TLS:=yes
+##WITH_TLS:=yes
 
 # Comment out to disable TLS/PSK support in the broker and client. Requires
 # WITH_TLS=yes.
 # This must be disabled if using openssl < 1.0.
-WITH_TLS_PSK:=yes
+##WITH_TLS_PSK:=yes
 
 # Comment out to disable client client threading support.
-WITH_THREADING:=yes
+##WITH_THREADING:=yes
 
 # Comment out to remove bridge support from the broker. This allow the broker
 # to connect to other brokers and subscribe/publish to topics. You probably
 # want to leave this included unless you want to save a very small amount of
 # memory size and CPU time.
-WITH_BRIDGE:=yes
+##WITH_BRIDGE:=yes
 
 # Comment out to remove persistent database support from the broker. This
 # allows the broker to store retained messages and durable subscriptions to a
@@ -58,23 +58,23 @@ WITH_MEMORY_TRACKING:=yes
 WITH_SYS_TREE:=yes
 
 # Build with SRV lookup support.
-WITH_SRV:=yes
+##WITH_SRV:=yes
 
 # Build using libuuid for clientid generation (Linux only - please report if
 # supported on your platform).
-WITH_UUID:=yes
+##WITH_UUID:=yes
 
 # Build with websockets support on the broker.
-WITH_WEBSOCKETS:=no
+WITH_WEBSOCKETS:=yes
 
 # Use elliptic keys in broker
 WITH_EC:=yes
 
 # Build man page documentation by default.
-WITH_DOCS:=yes
+WITH_DOCS:=no
 
 # Build with client support for SOCK5 proxy.
-WITH_SOCKS:=yes
+##WITH_SOCKS:=yes
 
 # =============================================================================
 # End of user configuration
diff --git a/src/loop.c b/src/loop.c
index 2a99ae7..ae6473c 100644
--- a/src/loop.c
+++ b/src/loop.c
@@ -86,6 +86,36 @@ static void temp__expire_websockets_clients(struct mosquitto_db *db)
 		last_check = mosquitto_time();
 	}
 }
+/* wsfd temp search to find all the connection sockets */
+static void temp__wsfd_get_num(struct mosquitto_db *db, 
+				struct pollfd *pfds, unsigned int *npfds, 
+				const unsigned int nprealloc)
+{
+	struct mosquitto *context, *ctxt_tmp;
+	unsigned nums = 0;
+	if ( ! pfds || ! npfds ) {
+		_mosquitto_log_printf(NULL, MOSQ_LOG_ERR, 
+					"Error: null pfds or npfds.");
+		return; /* error */
+	}
+
+	*npfds = 0;
+
+	HASH_ITER(hh_id, db->contexts_by_id, context, ctxt_tmp){
+		if(context->wsi && context->sock != INVALID_SOCKET){
+			int wxfd = lws_get_socket_fd(context->wsi);
+			if ( nums < nprealloc ) {
+				pfds[nums++].fd = wxfd;
+			} else {
+				_mosquitto_log_printf(NULL, MOSQ_LOG_ERR, 
+					"Error: drop wsfd %u %d.", nums, wxfd);
+			}
+		}
+	}
+	if ( nums < nprealloc ) {
+		*npfds = nums;
+	}
+}
 #endif
 
 int mosquitto_main_loop(struct mosquitto_db *db, mosq_sock_t *listensock, int listensock_count, int listener_max)
@@ -138,9 +168,17 @@ int mosquitto_main_loop(struct mosquitto_db *db, mosq_sock_t *listensock, int li
 #ifdef WITH_BRIDGE
 		context_count += db->bridge_count;
 #endif
+#ifdef WITH_WEBSOCKETS
+		const unsigned int wsfd_prealloc = 100;
+		struct pollfd wsfd[wsfd_prealloc];
+		unsigned int wsfd_num = 0;
+
+		memset(wsfd, 0, sizeof(wsfd));
+		temp__wsfd_get_num(db, wsfd, &wsfd_num, wsfd_prealloc); 
+#endif
 
 		if(listensock_count + context_count > pollfd_count || !pollfds){
-			pollfd_count = listensock_count + context_count;
+			pollfd_count = listensock_count + context_count + wsfd_prealloc;
 			pollfds = _mosquitto_realloc(pollfds, sizeof(struct pollfd)*pollfd_count);
 			if(!pollfds){
 				_mosquitto_log_printf(NULL, MOSQ_LOG_ERR, "Error: Out of memory.");
@@ -314,6 +352,29 @@ int mosquitto_main_loop(struct mosquitto_db *db, mosq_sock_t *listensock, int li
 		}
 
 #ifndef WIN32
+#ifdef WITH_WEBSOCKETS
+		if ( wsfd_num && pollfd_count >= wsfd_num && 
+				pollfd_index <= pollfd_count - wsfd_num ) {
+		   if ( wsfd_num <= wsfd_prealloc ) {
+		      unsigned int k;
+		      for (k=0; k<wsfd_num; k++) {
+			int xfd = wsfd[k].fd;
+			if ( xfd <= 6 ) continue; /* 3:/dev/urandom, 4:pipe, 5:pipe, 6:socket */
+			pollfds[pollfd_index].fd = xfd;
+			/*pollfds[pollfd_index].events = POLLIN | POLLOUT | POLLPRI;*/
+			pollfds[pollfd_index].events = POLLIN;
+			pollfds[pollfd_index].revents = 0;
+			pollfd_index ++;
+		      }
+		   } else {
+			_mosquitto_log_printf(NULL, MOSQ_LOG_ERR, "Filed wsfd_num %u  %u %u.", 
+				wsfd_num, pollfd_count, pollfd_index);
+		   }
+		} else if ( wsfd_num ) {
+			_mosquitto_log_printf(NULL, MOSQ_LOG_ERR, "Filed wsfd_num %u  %u %u.", 
+				wsfd_num, pollfd_count, pollfd_index);
+		}
+#endif
 		sigprocmask(SIG_SETMASK, &sigblock, &origsig);
 		fdcount = poll(pollfds, pollfd_index, 100);
 		sigprocmask(SIG_SETMASK, &origsig, NULL);
@@ -376,6 +437,8 @@ int mosquitto_main_loop(struct mosquitto_db *db, mosq_sock_t *listensock, int li
 			 * citizens. */
 			if(db->config->listeners[i].ws_context){
 				libwebsocket_service(db->config->listeners[i].ws_context, 0);
+				/* wsfd poll again to service the non-fd events maybe??? */
+				libwebsocket_service(db->config->listeners[i].ws_context, 0);
 			}
 		}
 		if(db->config->have_websockets_listener){
diff --git a/src/websockets.c b/src/websockets.c
index d79fabf..839f314 100644
--- a/src/websockets.c
+++ b/src/websockets.c
@@ -627,6 +627,18 @@ struct libwebsocket_context *mosq_websockets_init(struct _mqtt3_listener *listen
 
 	lws_set_log_level(log_level, log_wrap);
 
+    if ( listener->host ) {
+        size_t sz = strnlen(listener->host, 16);
+        if ( sz >=7 && sz <= 16 ) { /* IP in string: 7 min length. 15 max. */
+            info.iface = listener->host;
+		_mosquitto_log_printf(NULL, MOSQ_LOG_INFO, 
+                        "Listener host \"%s\" of size %zu.", listener->host, sz);
+        } else {
+		_mosquitto_log_printf(NULL, MOSQ_LOG_WARNING, 
+                        "Warning: Malformed listener host \"%s\" of size %zu.", 
+                                  listener->host, sz);
+        }
+    }
 	_mosquitto_log_printf(NULL, MOSQ_LOG_INFO, "Opening websockets listen socket on port %d.", listener->port);
 	return libwebsocket_create_context(&info);
 }
