--- mosq_test.py	2016-06-04 21:11:40.920922672 -0700
+++ mosq_test_ws.py	2016-06-09 23:10:43.109069785 -0700
@@ -37,13 +37,15 @@
 
     return subprocess.Popen(cmd, env=env)
 
-def expect_packet(sock, name, expected):
+def expect_packet_ws(sock_ws, name, expected):
     if len(expected) > 0:
         rlen = len(expected)
     else:
         rlen = 1
 
-    packet_recvd = sock.recv(rlen)
+    packet_recvd = sock_ws.recv()
+    if rlen != len(packet_recvd):
+        return false
     return packet_matches(name, packet_recvd, expected)
 
 def packet_matches(name, recvd, expected):
@@ -62,16 +64,21 @@
     else:
         return 1
 
-def do_client_connect(connect_packet, connack_packet, hostname="localhost", port=1888, timeout=60, connack_error="connack"):
-    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
-    sock.settimeout(timeout)
-    sock.connect((hostname, port))
-    sock.send(connect_packet)
+def do_client_connect_ws(connect_packet, connack_packet, hostname="localhost", port=1888, timeout=60, connack_error="connack"):
+    import sys as wssys
+    if "../websocket_client-0.37.0/" not in wssys.path:
+        wssys.path.insert(0,"../websocket_client-0.37.0/")
+    import websocket as wst
+    ws = wst.create_connection("ws://%s:%d/mqtt" % (hostname, port),
+                     subprotocols=["mqtt"],
+                     sockopt=((socket.IPPROTO_TCP, socket.TCP_NODELAY, 1),) )
+    ws.settimeout(timeout)
+    ws.send(connect_packet)
 
-    if expect_packet(sock, connack_error, connack_packet):
-        return sock
+    if expect_packet_ws(ws, connack_error, connack_packet):
+        return ws
     else:
-        sock.close()
+        ws.close()
         raise ValueError
 
 def remaining_length(packet):
