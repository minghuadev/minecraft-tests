

https://wiki.python.org/moin/EmbeddedPython



http://cgit.openembedded.org/cgit.cgi/openembedded/tree/recipes/python
https://blogs.gnome.org/johan/2007/01/18/introducing-python-launcher/
http://www.pygtk.org/pygtk2tutorial/examples/pygtkconsole.py


http://www.myhdl.org/
http://sourceforge.net/projects/whatos/



https://wiki.python.org/moin/Freeze

$ python freeze.py hello.py
$ make
$ ./hello

$ python freeze.py -X pydoc hello.py

$ python freeze.py -X codecs -X copy -X distutils -X encodings -X locale -X macpath -X ntpath -X os2emxpath -X popen2 -X pydoc -X re -X warnings hello.py



http://groups.google.com/group/comp.lang.python/browse_frm/thread/9407982ad24b62ec/5018f9abebaa285a?lnk=st&q=build+python+static&rnum=3&hl=en#5018f9abebaa285a
using static modules

before running configure: 
perl -pi -e 's!(^#\*shared\*)!*static*\n$1!' Modules/Setup.dist



https://groups.google.com/forum/?hl=en#!topic/comp.lang.python/lAeYKtJLYuw
mu...@vex.net 	
8/6/04
Other recipients: m...@python.net, pytho...@python.org, cx-free...@lists.sourceforge.net, ant...@computronix.com
Yes, thanks!, it was easy.  I just edited Modules/Setup as follows:

(1) Changed the commented *shared* line to the *static* line (see below).

(2) Uncommented the modules (math, time, array) that I wanted incorporated
into the static libpython.a library.

(3) Added lines for a couple other modules (strop & _random) that
previously weren't listed in the Setup file.

(4) Reran configure, make & make install.  It works!

Now I can run freeze.py and build a truly stand-alone executable including
the modules I mentioned.

Here's a section of Modules/Setup with my changes:
--------------------------------------------------------------------------
# Uncommenting the following line tells makesetup that all following #
modules are to be built as shared libraries (see above for more
# detail; also note that *static* reverses this effect):

*static*

# Modules that should always be present (non UNIX dependent):

array arraymodule.c # array objects
#cmath cmathmodule.c # -lm # complex math library functions
math mathmodule.c # -lm # math library functions, e.g. sin()
#struct structmodule.c  # binary structure packing/unpacking
time timemodule.c # -lm # time operations and variables
#operator operator.c    # operator.add() and similar goodies
#_weakref _weakref.c    # basic weak reference support
#_testcapi _testcapimodule.c    # Python C API test module
strop stropmodule.c
_random _randommodule.c
--------------------------------------------------------------------------



