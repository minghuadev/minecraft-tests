
search gcc adding an architecture

toc: riscv change set
     linked three questions with optional details and approaches
     a blog



https://stackoverflow.com/questions/44904644/gcc-how-to-add-support-to-a-new-architecture

https://gcc.gnu.org/ml/gcc-cvs/2017-02/
see r245224 ... r245231 for the introduction of the riscv port

245224:
Added:
    trunk/gcc/common/config/riscv/
    trunk/gcc/common/config/riscv/riscv-common.c
    trunk/gcc/config/riscv/
    trunk/gcc/config/riscv/constraints.md
    trunk/gcc/config/riscv/elf.h
    trunk/gcc/config/riscv/generic.md
    trunk/gcc/config/riscv/linux.h
    trunk/gcc/config/riscv/multilib-generator   (with props)
    trunk/gcc/config/riscv/peephole.md
    trunk/gcc/config/riscv/pic.md
    trunk/gcc/config/riscv/predicates.md
    trunk/gcc/config/riscv/riscv-builtins.c
    trunk/gcc/config/riscv/riscv-c.c
    trunk/gcc/config/riscv/riscv-ftypes.def
    trunk/gcc/config/riscv/riscv-modes.def
    trunk/gcc/config/riscv/riscv-opts.h
    trunk/gcc/config/riscv/riscv-protos.h
    trunk/gcc/config/riscv/riscv.c
    trunk/gcc/config/riscv/riscv.h
    trunk/gcc/config/riscv/riscv.md
    trunk/gcc/config/riscv/riscv.opt
    trunk/gcc/config/riscv/sync.md
    trunk/gcc/config/riscv/t-elf-multilib
    trunk/gcc/config/riscv/t-linux
    trunk/gcc/config/riscv/t-linux-multilib
    trunk/gcc/config/riscv/t-riscv
Modified:
    trunk/gcc/ChangeLog
    trunk/gcc/config.gcc
    trunk/gcc/configure.ac
    trunk/gcc/doc/contrib.texi
    trunk/gcc/doc/install.texi
    trunk/gcc/doc/invoke.texi
    trunk/gcc/doc/md.texi

245225:
Modified:
    trunk/gcc/ChangeLog
    trunk/gcc/configure

245226:
Added:
    trunk/libgcc/config/riscv/
    trunk/libgcc/config/riscv/atomic.c
    trunk/libgcc/config/riscv/crti.S
    trunk/libgcc/config/riscv/crtn.S
    trunk/libgcc/config/riscv/div.S
    trunk/libgcc/config/riscv/linux-unwind.h
    trunk/libgcc/config/riscv/muldi3.S
    trunk/libgcc/config/riscv/multi3.S
    trunk/libgcc/config/riscv/save-restore.S
    trunk/libgcc/config/riscv/sfp-machine.h
    trunk/libgcc/config/riscv/t-elf
    trunk/libgcc/config/riscv/t-elf32
    trunk/libgcc/config/riscv/t-elf64
    trunk/libgcc/config/riscv/t-softfp32
    trunk/libgcc/config/riscv/t-softfp64
Modified:
    trunk/libgcc/ChangeLog
    trunk/libgcc/config.host

245227:
Modified:
    trunk/libatomic/ChangeLog
    trunk/libatomic/configure.tgt

245228:
Modified:
    trunk/gcc/testsuite/ChangeLog
    trunk/gcc/testsuite/g++.dg/cpp0x/constexpr-rom.C
    trunk/gcc/testsuite/gcc.c-torture/execute/20101011-1.c
    trunk/gcc/testsuite/gcc.dg/20020312-2.c
    trunk/gcc/testsuite/gcc.dg/builtin-apply2.c
    trunk/gcc/testsuite/gcc.dg/ifcvt-4.c
    trunk/gcc/testsuite/gcc.dg/loop-8.c
    trunk/gcc/testsuite/gcc.dg/sibcall-10.c
    trunk/gcc/testsuite/gcc.dg/sibcall-9.c
    trunk/gcc/testsuite/gcc.dg/stack-usage-1.c
    trunk/gcc/testsuite/gcc.dg/torture/stackalign/builtin-apply-2.c
    trunk/gcc/testsuite/gcc.dg/tree-ssa/20040204-1.c
    trunk/gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-cse-2.c
    trunk/gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-3.c
    trunk/gcc/testsuite/lib/target-supports.exp

245229:
Modified:
    trunk/contrib/ChangeLog
    trunk/contrib/config-list.mk

245230:
Modified:
    trunk/gcc/ChangeLog
    trunk/gcc/doc/invoke.texi

245231:
Modified:
    trunk/gcc/ChangeLog
    trunk/gcc/doc/invoke.texi



linked question
https://stackoverflow.com/questions/10617215/how-to-write-your-own-code-generator-backend-for-gcc?noredirect=1&lq=1

one example: 

    [1] Download gcc 4.9 source
    [2] Add your architecture name to  `config.sub`  around line 250 look 
        for  `# Decode aliases for certain CPU-COMPANY combinations` . 
	In that list add  `| my_processor \` 
    [3] In that same file look for  `# Recognize the basic CPU types with company name` . 
        add yourself to the list:  `| my_processor-* \`

    [4] Search for the file  `gcc/config.gcc` , in the file look for 
        case ${target} it is around line 880, add yourself in the following way:

          ;;
        my_processor*-*-*)
          c_target_objs="my_processor-c.o"
          cxx_target_objs="my_processor-c.o"
          target_has_targetm_common=no
          tmake_file="${tmake_file} my_processor/t-my_processor"
          ;;

    [5] Create a folder  `gcc-4.9.0\gcc\config\my_processor`
    [6] Copy files from an existing project and just edit it, or create 
        your own from scratch. In our project we had copied all the files 
	from the msp430 project and edited it all
    [7] You should have the following files (not all files are mandatory):
        my_processor.c
        my_processor.h
        my_processor.md
        my_processor.opt
        my_processor-c.c
        my_processor.def
        my_processor-protos.h
        constraints.md
        predicates.md
        README.txt
        t-my_processor
    [8] create a path  `gcc-4.9.0/build/object` 
    [9] run  `../../configure --target=my_processor --prefix=path for my compiler --enable-languages="c"`
    [10] make
    [11] make install
    [12] Do a lot of research and debugging.
    [13] Have fun.



linked question
https://stackoverflow.com/questions/48149147/how-to-tell-gcc-not-to-generate-particular-instructions?noredirect=1&lq=1

    it may be as easy as removing a define_insn (or define_expand or...) block 
    in gcc/config/mips/*.md

    For the specific case of MUL you can force ISA_HAS_R6MUL to be 0 
    in config/mips/mips.h, but in the general case. as Marc Gilisse said, 
    disabling the define_insn and define_expand statements that 
    that generate a given instruction will prevent that instruction 
    from being emitted. Instead GCC will either emit some 
    other instruction(s), emit a library call, or crash with a fatal error.



linked question
https://stackoverflow.com/questions/8696229/how-to-create-a-c-compiler-for-custom-cpu

options: 
    llvm, http://llvm.org/releases/2.2/docs/WritingAnLLVMBackend.html
    vbcc, http://www.compilers.de/vbcc.html



a blog:
https://kristerw.blogspot.com/2017/08/writing-gcc-backend_4.html


