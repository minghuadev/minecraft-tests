diff --git a/trunk/rtl/bram.py b/trunk/rtl/bram.py
old mode 100644
new mode 100755
index 561566e..189c7ba
--- a/trunk/rtl/bram.py
+++ b/trunk/rtl/bram.py
@@ -14,7 +14,7 @@
 from myhdl import *
 from defines import *
 from functions import *
-from debug import *
+###from debug import * ### local_mod: avoid using rom.dump
 
 def BRAMInitial(ram, filename, clock):
     __verilog__ = """
diff --git a/trunk/rtl/top.py b/trunk/rtl/top.py
old mode 100644
new mode 100755
index 75b9cfb..0840988
--- a/trunk/rtl/top.py
+++ b/trunk/rtl/top.py
@@ -245,7 +245,7 @@ def SysTop(txd_line, rxd_line, txd_line2, rxd_line2, leds, reset, clock,
     uart = UART(rx_data, rx_avail, rx_error, read_en,
            tx_data, tx_busy, write_en,
            uart_rxd, uart_txd, reset, clock,
-           freq_hz=50000000, baud=115200)
+           freq_hz=50000000, baud=115200*27) ### local_mod: *27 to speed up uart tx
 
     uart2 = UART(rx_data2, rx_avail2, rx_error2, read_en2,
            tx_data2, tx_busy2, write_en2,
@@ -337,7 +337,7 @@ def SysTop(txd_line, rxd_line, txd_line2, rxd_line2, leds, reset, clock,
     return imem, dmem, core, uart, uart2, glue, run
 
 import sys
-from numpy import log2
+from local_numpy import log2
 
 def TopBench():
     prepare()
diff --git a/trunk/rtl/uart.py b/trunk/rtl/uart.py
old mode 100644
new mode 100755
index a400fb7..8fea895
--- a/trunk/rtl/uart.py
+++ b/trunk/rtl/uart.py
@@ -79,7 +79,9 @@ def UART(rx_data, rx_avail, rx_error, read_en,
                 tx_count16.next = (tx_count16 + 1) % 16
 
                 if tx_count16 == 0 and tx_is_busy:
-                    tx_bitcount.next = tx_bitcount - 1
+                    ### tx_bitcount.next = tx_bitcount - 1 ### local_mod: exception somehow
+                    if tx_bitcount > 0: ### local_mod: avoid exception
+                        tx_bitcount.next = tx_bitcount - 1 ### local_mod: conditional
 
                     if tx_bitcount == 0:
                         # transmit finished
@@ -240,7 +242,7 @@ def uart_test_top(txd_line, rxd_line, debug_txd_line, debug_rxd_line, leds, rese
     return instances()
 
 import sys
-from numpy import log2
+from local_numpy import log2
     
 if __name__ == '__main__':
     #rx_data = Signal(intbv(0)[8:])
