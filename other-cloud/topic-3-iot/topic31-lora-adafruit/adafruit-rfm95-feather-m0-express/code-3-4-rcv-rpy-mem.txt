import board
import digitalio
import time
import busio
import adafruit_rfm9x
import neopixel
import gc


gc.collect()
print("mem free: ", gc.mem_free())


led = digitalio.DigitalInOut(board.LED)
led.direction = digitalio.Direction.OUTPUT

print("OK blinking LED for 3 seconds ...")
tm0=time.monotonic()
while True:
    led.value = True
    time.sleep(0.47)
    led.value = False
    time.sleep(0.47)
    tm1 = time.monotonic()
    if tm1-tm0 >= 2.9:
        break

# keep led on
led.value = True
time.sleep(0.1)


print("OK loading SPI ...")

spi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)

cs = digitalio.DigitalInOut(board.D5)
reset = digitalio.DigitalInOut(board.D6)


print("OK loading RFM9x ...")

rfm9x = adafruit_rfm9x.RFM9x(spi, cs, reset, 915.0)

print("    rfm9x node %s %s" % ( str(type(rfm9x.node)), str(rfm9x.node)))
print("    rfm9x dest %s %s" % ( str(type(rfm9x.destination)), str(rfm9x.destination)))
print("    rfm9x txpw %s %s" % ( str(type(rfm9x.tx_power)), str(rfm9x.tx_power)))


print("OK RFM9x sending ...")
rfm9x.send('Hello world!')

print("OK RFM9x sent .")


# One neopixel connected internally!
dot = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.0125)


g_wheel_val = 1
def blink_for(timeout_arg=1):
    tm00 = time.monotonic()

    global g_wheel_val
    i=g_wheel_val
    led_val = False
    led.value = led_val
    while True:
        idx = (i/2) % 8
        if idx == 0:
            dot[0] = [255, 255, 255]
        elif idx == 1:
            dot[0] = [255, 0, 0]
        elif idx == 2:
            dot[0] = [0, 255, 0]
        elif idx == 3:
            dot[0] = [0, 0, 255]
        elif idx == 4:
            dot[0] = [88, 88, 0]
        elif idx == 5:
            dot[0] = [88, 0, 88]
        elif idx == 6:
            dot[0] = [0, 88, 88]
        else:
            dot[0] = [44, 44, 44]

        i += 1
        if i > 255: i = 1
        time.sleep(0.2)
        led_val = not led_val
        led.value = led_val
        tm01 = time.monotonic()
        if tm01 - tm00 >= timeout_arg:
            break

    dot[0] = [0, 0, 0]
    led_val = True
    led.value = led_val
    g_wheel_val = i
    print("mem free: ", gc.mem_free())
    gc.collect()

#blink_for(3)


print("mem free: ", gc.mem_free())
print("OK RFM9x receiving ...")
while True:
    packet = rfm9x.receive(timeout=6.0)
    if packet is not None:
        packet_text = "<unknown>"
        decode_ok = False
        try:
            packet_text = str(packet, 'ascii')
            decode_ok = True
        except:
            packet_text = "<exception-decoding-ascii>"
        print('Received: {0}'.format(packet_text), 
                "  at rssi %d snr %s" % (rfm9x.last_rssi, str(rfm9x.last_snr)))
        if decode_ok:
            reply_msg = 'Received: {0}'.format(packet_text) + \
                "  at rssi %d snr %s" % (rfm9x.last_rssi, str(rfm9x.last_snr))
            time.sleep(0.1)
            rfm9x.send(reply_msg)

        blink_for(1.0)
    else:
        print("Received nothing.")
    print("mem free: ", gc.mem_free())


