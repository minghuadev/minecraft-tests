
Using thread Module
==========================

import thread



Without Thread
==========================
page 162


#!/usr/bin/env python

from time import sleep, ctime

def loop0():
    print 'start loop 0 at:', ctime()
    sleep(4)
    print 'loop 0 done at:', ctime()

def loop1():
    print 'start loop 1 at:', ctime()
    sleep(2)
    print 'loop 1 done at:', ctime()

def main():
    print 'starting at:', ctime()
    loop0()
    loop1()
    print 'all done at:', ctime()

if __name__ == '__main__':
    main()



The thread Module
============================

thread Module functions:

  start_new_thread(function, args, kwargs=None)
  allocate_lock()
  exit()

LockType Lock Object methods:

  acquire(wait-None)
  locked()
  release()


With thread Module
============================

#!/usr/bin/env python

import thread
from time import sleep, ctime

def loop0():
    print 'start loop 0 at:', ctime()
    sleep(4)
    print 'loop 0 done at:', ctime()

def loop1():
    print 'start loop 1 at:', ctime()
    sleep(2)
    print 'loop 1 done at:', ctime()

def main():
    print 'starting at:', ctime()
    thread.start_new_thread(loop0, ())
    thread.start_new_thread(loop1, ())
    sleep(6)
    print 'all done at:', ctime()

if __name__ == '__main__':
    main()


With thread Module, improved
============================

#!/usr/bin/env python

import thread
from time import sleep, ctime

loops = [4,2]

def loop(nloops, nsec, lock):
    print 'start loop ', nloop, ' at:', ctime()
    sleep(nsec)
    print 'loop done ', nloop, ' at:', ctime()
    lock.release()

def main():
    print 'starting at:', ctime()
    locks = []
    nloops = range(len(loops))
    for i in nloops:
        lock = thread.allocate_lock()
        lock.acquire()
        locks.append(lock)
    for i in nloops:
        thread.start_new_thread(loop, (i, loops[i], locks[i]))
    for i in nloops:
        while locks[i].locked(): pass
    print 'all done at:', ctime()

if __name__ == '__main__':
    main()


